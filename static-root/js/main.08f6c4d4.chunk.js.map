{"version":3,"sources":["reportWebVitals.js","lookup/components.js","stocks/detail.js","stocks/list.js","stocks/lookup.js","stocks/buttons.js","stocks/components.js","navigation/components.js","navigation/search.js","navigation/lookup.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","backendlookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","indexOf","onerror","e","send","Stock","props","ticker","console","log","useEffect","script1","createElement","type","src","script2","innerHTML","body","appendChild","removeChild","class","style","padding","id","rel","target","StockList","useState","stocksInit","setStocksInit","stocks","setStocks","stocksDidSet","setStocksDidSet","final","newStocks","concat","map","item","index","StockLink","stock","ActionButton","isTracking","predict","handleActionBackend","handleClick","event","preventDefault","apiStockAction","display","onClick","script","async","StockDetailComponent","tickerinit","didStockLookup","setDidStockLookup","setTicker","setIsTracking","setHasPrediction","prediction","setPrediction","didPredictionLookup","setDidPredictionLookup","handleBackendStockLookup","is_tracking","alert","future_value","apiStockLookup","className","PredictionComponent","handleBackendPredictionLookup","apiPredictionLookup","HomeLink","ProfileLink","StockSearchComponent","searchTerm","setSearchTerm","searchResults","setSearchResults","apiStockSearch","placeholder","value","onChange","React","stocksListEl","getElementById","ReactDOM","render","dataset","navigationEl","Container","Row","Col","querySelectorAll","forEach","container"],"mappings":"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","file":"static/js/main.08f6c4d4.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","function getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n  }\n  \n  export function backendlookup(method, endpoint, callback, data) {\n    let jsonData;\n    if (data) {\n      jsonData = JSON.stringify(data)\n    }\n    const xhr = new XMLHttpRequest()\n    const url = `http://127.0.0.1:8000/api${endpoint}`\n    xhr.responseType = 'json'\n    const csrftoken = getCookie('csrftoken')\n    xhr.open(method, url)\n    xhr.setRequestHeader('Content-Type', 'application/json')\n    if (csrftoken) {\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest')\n      xhr.setRequestHeader('X-CSRFToken', csrftoken)\n    }\n  \n    xhr.onload = function() {\n      if (xhr.status === 403) {\n        const detail = xhr.response.detail\n        if (detail === \"Authentication credentials were not provided.\") {\n          if (window.location.href.indexOf(\"login\") === -1) {\n            window.location.href = \"/login?showLoginRequired=true\"\n          }\n        }\n      }\n      callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n      callback({'message': 'Request was an error'}, 400)\n    }\n    xhr.send(jsonData)\n  }","import React, { useEffect } from 'react'\n//Simple component all it does is display the ticker for a stock\nexport function Stock(props) {\n    const {ticker} = props\n    console.log(ticker);\n    useEffect(() => {\n        const script1 = document.createElement(\"script\");\n        script1.type = \"text/javascript\";\n        script1.src = \"https://s3.tradingview.com/tv.js\";\n        const script2 = document.createElement(\"script\");\n        script2.type = \"text/javascript\";\n        script2.innerHTML = `new TradingView.widget({\n        \"autosize\": true,\n        \"symbol\": \"${ ticker }\",\n        \"interval\": \"D\",\n        \"timezone\": \"Etc/UTC\",\n        \"theme\": \"light\",\n        \"style\": \"1\",\n        \"locale\": \"en\",\n        \"toolbar_bg\": \"#f1f3f6\",\n        \"enable_publishing\": false,\n        \"hide_top_toolbar\": true,\n        \"hide_legend\": true,\n        \"save_image\": false,\n        \"container_id\": \"tradingview_29472\"\n        });`\n        const script = document.body.appendChild(script1);\n        script.appendChild(script2);\n        return () => {\n            document.body.removeChild(script2);\n            document.body.removeChild(script1);\n        }\n    });\n    return <div class=\"tradingview-widget-container\" style={{padding: 40 + 'px'}}>\n        <div id=\"tradingview_29472\"></div>\n        <div class=\"tradingview-widget-copyright\">\n            <a href={`https://www.tradingview.com/symbols/${ ticker }/`} rel=\"noopener\" target=\"_blank\">\n                <span class=\"blue-text\">{ticker} Chart</span>\n            </a> by TradingView\n        </div>\n    </div>\n}","import React, { useEffect, useState } from 'react'\n\nimport { apiStockList } from './lookup'\n\nimport { StockLink } from './components'\n\n//Stock list component\nexport function StockList(props) {\n  const [stocksInit, setStocksInit] = useState([]) //Initial stocks in the list\n  const [stocks, setStocks] = useState([]) //The stocks themselves\n  const [stocksDidSet, setStocksDidSet] = useState(false) //Have the stocks in the list been set\n\n\n  //When the states above change, concatenate the old stock list and new stock list\n  useEffect(() => {\n    const final = [...props.newStocks].concat(stocksInit)\n    if (final.length !== stocks.length) {\n      setStocks(final)\n    }\n  }, [props.newStocks, stocks, stocksInit])\n\n  //Handles initial lookup of stocks\n  useEffect(() => {\n    if (stocksDidSet === false) {\n      const handleStockListLookup = (response, status) => {\n        if (status === 200) {\n          setStocksInit([...response])\n          setStocksDidSet(true)\n        }\n      }\n      apiStockList(handleStockListLookup)\n    }\n  }, [stocksInit, stocksDidSet, setStocksDidSet])\n  //If stocks list is not emptpy, render a list of stock links\n  return <div>List will turn into list of widgets, prediction next to each ticker\n          {stocks !== null && \n            stocks.map( (item, index) => ( \n              <StockLink key={index} stock={item} /> \n            ) ) } \n        </div>\n}","import {backendlookup} from '../lookup'\n\n//Handles lookup for a ticker, takes ticker into url\n//Connects to stock_detail_api_view\n//Used for detail view mostly\nexport function apiStockLookup(ticker, callback) {\n    console.log(ticker)\n    backendlookup(\"GET\", `/stocks/${ticker}`, callback)\n} \n\n//Handles generation of stock list\n//Connects to stock_list_api_view\n//Used for home page view\nexport function apiStockList(callback) {\n    const endpoint = '/stocks/'\n    backendlookup(\"POST\", endpoint, callback)\n}\n\n//Handles action being performed on stock; adding/removing or getting prediction\n//takes ticker into url if adding/removing, takes ticker into request data if predicting\n//connects to stocks_action_api_view or prediction_create_api_view\n//Used for adding AND removing a stock, as well as prediction GENERATION\nexport function apiStockAction(ticker, predict, callback) {\n    if (predict) {\n        backendlookup(\"POST\", `/prediction/create`, callback, {\"ticker\": ticker})\n    } else {\n        backendlookup(\"POST\", `/stocks/${ticker}/action`, callback)\n    }\n}\n\n//Used ONLY for retrieving a prediction/seeing if one already exists\n//takes ticker into request data\n//connects to prediction_detail_api_view\nexport function apiPredictionLookup(ticker, callback) {\n    backendlookup(\"POST\", `/prediction/`, callback, {\"ticker\": ticker})\n}","import React from 'react'\n\nimport {apiStockAction} from './lookup'\n\n// Action button component, same component for adding/removing and getting prediction\nexport function ActionButton (props) {\n    const {ticker, isTracking, predict, handleActionBackend} = props\n\n    //Callback to api when button clicked\n    const handleClick = (event) => {\n        event.preventDefault()\n        apiStockAction(ticker, predict, handleActionBackend)\n    }\n    const display = isTracking === true ? 'Remove' : 'Add' //basic display logic for add or remove, so we can just have one button instead of 2\n    // renders prediction button if 'predict' prop has been set, if not render add/remove button\n    return predict === true ? <button onClick={handleClick}>Get Prediction</button> : <button onClick={handleClick}> {display} </button>\n}","import React, { useState, useEffect } from 'react'\n\nimport { apiStockLookup, apiPredictionLookup } from './lookup'\nimport { Stock } from './detail'\nimport { StockList } from './list'\nimport { ActionButton } from './buttons'\n\n//Stock link component, redirects to the stock when clicked\nexport function StockLink (props) {\n  const {stock} = props\n  const handleStockLink = (event) => {\n    event.preventDefault()\n    window.location.href = `/stocks/${stock.ticker}`\n  }\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.type = \"text/javascript\";\n    script.src = \"https://s3.tradingview.com/external-embedding/embed-widget-single-quote.js\";\n    script.async = true;\n    script.innerHTML = `{\n      \"symbol\": \"NASDAQ:${stock.ticker}\",\n      \"width\": 350,\n      \"colorTheme\": \"light\",\n      \"isTransparent\": false,\n      \"locale\": \"en\"\n    }`\n    document.body.appendChild(script);\n    return () => {\n      document.body.removeChild(script);\n    }\n  })\n  return <div onClick={handleStockLink}><div class='tradingview-widget-container'>\n    <div class=\"tradingview-widget-container__widget\"></div>\n    </div></div>;\n}\n/*\n<div class=\"tradingview-widget-copyright\">\n      <a href={`https://www.tradingview.com/symbols/NASDAQ-${stock.ticker}/`} rel=\"noopener\" target=\"_blank\">\n        <span class=\"blue-text\">{stock.ticker} Price Today</span>\n      </a> by TradingView\n    </div>\n*/\n\n//Wrapper for stock list, handleNewStock is a callback for if a stock is added\n//While on stock page, but is not required right now\nexport function StockListComponent (props) {\n  const [newStocks, setNewStocks] = useState([])\n  const handleNewStock = (newStock) => {\n    let tempNewStocks = [...newStocks]\n    tempNewStocks.unshift(newStock)\n    setNewStocks(tempNewStocks)\n  }\n  return <div className={props.className}>\n    <StockList newStocks={newStocks} {...props} />\n  </div>\n}\n\n//Heres the fun stuff\n//Handles the entire stock detail page\n//probably has alot of room for abstraction\nexport function StockDetailComponent(props) {\n  const {tickerinit} = props //This is dumb, but i cannot find another way to do it. Ticker must be passed by props\n  const [didStockLookup, setDidStockLookup] = useState(false) //have we checked to see if the user tracks the stock?\n  const [ticker, setTicker] = useState(null) //if we have checked to see if we track the stock,\n                                            // set the ticker again, this is done to make sure nothing is rendered before we perform the lookup\n  const [isTracking, setIsTracking] = useState(false) //Is the user tracking the stock\n  const [hasPrediction, setHasPrediction] = useState(false) //Does the user have a prediction for this stock?\n  const [prediction, setPrediction] = useState(null) //What is the actual prediction\n  const [didPredictionLookup, setDidPredictionLookup] = useState(false) //Did we do the prediction lookup\n\n  // Used when we make api call to see if we track the stock\n  const handleBackendStockLookup = (response, status) => {\n    if (status === 200) {\n      setTicker(response.ticker)\n      setIsTracking(response.is_tracking)\n    } else {\n      alert('Error finding stock')\n    }\n  }\n\n  // Used when we see if the stock has a prediction\n  const handleBackendPredictionLookup = (response, status) => {\n    if (status === 200) {\n      setPrediction(response.future_value)\n      setHasPrediction(true)\n      setDidPredictionLookup(true)\n    } else {\n      alert('Unable to find prediction')\n    }\n  }\n\n  // Used when we hit an action button\n  const handleActionBackend = (response, status) => {\n    //Status 200 means success, but nothing created\n    //if we are tracking, hitting the button again would\n    //untrack, so set appropriate states\n    if (status === 200 && isTracking) {\n      setIsTracking(false)\n      setHasPrediction(false)\n      setPrediction(null)\n      //setTicker(response.ticker)\n    } \n    //Reverse of above\n    else if (status === 200 && !isTracking) {\n        setIsTracking(true)\n    } \n    // status 201 means something was made, this is the new prediction\n    // Also must be tracking to get a prediction\n    // Is tracking is likely handled in button as well\n    else if (status === 201 && isTracking) {\n      setPrediction(response.future_value)\n      setHasPrediction(true)\n    } else {\n      alert('cant add/remove')\n    }\n  }\n\n  //does stock lookup upon page rendering\n  useEffect(() => {\n    if (didStockLookup === false) {\n      apiStockLookup(tickerinit, handleBackendStockLookup)\n      setDidStockLookup(true)\n    }\n\n  }, [tickerinit, didStockLookup, setDidStockLookup])\n  // Renders the ticker, prediction if it exists, add/remove button, get prediction button if tracking\n  return ticker === null ? null :<div> \n    <Stock ticker={ticker} className={props.className} />\n    <PredictionComponent ticker={ticker} didPredictionLookup={didPredictionLookup} prediction={prediction} handleBackendPredictionLookup={handleBackendPredictionLookup} />\n    <ActionButton ticker={ticker} predict={false} isTracking={isTracking} handleActionBackend={handleActionBackend}/> \n    {isTracking && <ActionButton ticker={ticker} predict={true} isTracking={isTracking} handleActionBackend={handleActionBackend}/>}\n  </div>\n}\n\n// Basic component for a prediction, has callbacks to handle a backend prediction lookup being performed\nfunction PredictionComponent (props) {\n  const {ticker, prediction, didPredictionLookup, handleBackendPredictionLookup} = props\n  \n  //If we have not done a prediction lookup, do it when page renders\n  useEffect(() => {\n    if (!didPredictionLookup) {\n      apiPredictionLookup(ticker, handleBackendPredictionLookup)\n    }\n  })\n  // Returns the prediction if we have one\n  return prediction !== null ? <div>Prediction: {prediction}</div> : null\n}","import React from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\n\nimport { StockSearchComponent } from './search'\n\n//Wrapper component for a link to a stock\nexport function StockLink(props) {\n  const { stock } = props\n  // Handler for when you click the component, sends you to the url\n  const handleStockLink = (event) => {\n    event.preventDefault()\n    window.location.href = `/stocks/${stock.ticker}`\n  }\n  return (\n    <span onClick={handleStockLink}>{stock.ticker} </span>\n  )\n}\n\n// Wrapper for whole navbar component, using react-bootstrap components\nexport function NavigationComponent(props) {\n  return (\n    <Container>\n      <Row>\n        <Col> <StockSearchComponent /> </Col>\n        <Col> <HomeLink /> </Col>\n        <Col> <ProfileLink />  </Col>\n      </Row>\n    </Container>\n  )\n}\n\n// Same as stock link, but just to home page, could be combined, just passing in other info to 'props' for direction\nfunction HomeLink(props) {\n  const handleHomeLink = (event) => {\n    event.preventDefault()\n    window.location.href = '/'\n  }\n  return (\n    <span onClick={handleHomeLink}>\n      HomeLink\n    </span>\n  )\n}\n\nfunction ProfileLink(props) {\n  return (\n    <span>\n      ProfileLink *useless right now*\n    </span>\n  )\n}","import React, { useState, useEffect } from 'react'\n\nimport { StockLink } from './components'\nimport {apiStockSearch } from './lookup'\n\n// Search bar component\nexport function StockSearchComponent (props) {\n    const [searchTerm, setSearchTerm] = useState(\"\") // State for what the current search term in the search bar is\n    const [searchResults, setSearchResults] = useState([]) // State for what the current search results are\n\n    //Callback for when search term changes\n    const handleSearchTermChange = (event) => {\n      setSearchTerm(event.target.value)\n    }\n  \n    //Called when anything changes on this component, ie handles lookup for when you modify the search term\n    useEffect(() => {\n      const handleSearchTermLookup = (response, status) => {\n        if (status === 200) {\n          setSearchResults([...response])\n        } else {\n          alert('Error finding stock')\n        }\n      }\n      apiStockSearch(searchTerm, handleSearchTermLookup)\n    }, [searchTerm])\n    \n    // Input for search, as well as list of search results, all of which are links respectively, rendering\n    // If the search term in not nothing, so nothing renders if you dont type stuff in\n    return <div>Need To not have list push rest of page around, will be able to search company names\n      <input type=\"text\" placeholder=\"Search tickers\" value={searchTerm} onChange={handleSearchTermChange} />\n      {searchTerm !== \"\" && <ul>\n        {searchResults.map( (item, index) => (\n          <li><StockLink stock={item} key={item.id} /></li>\n        ))}\n      </ul>}\n    </div>\n  }","import { backendlookup } from '../lookup'\n\n// Handles api lookup for search bar, takes in the searchTerm as request data,\n// Endpoint is /stocks/search -> connects to stock_search_api_view in /stocks/api/views.py\nexport function apiStockSearch(searchTerm, callback) {\n    const endpoint = '/stocks/search'\n    backendlookup(\"POST\", endpoint, callback, {\"searchTerm\": searchTerm})\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { StockDetailComponent, StockListComponent } from './stocks'\nimport { NavigationComponent } from './navigation'\n\n// This stuff creates new elements and attatches them to the javascript (React) code, as well as links them to the webpage\n// Probably dont need to do anything here\nconst e = React.createElement\n\nconst stocksListEl = document.getElementById('stocks-list')\nif (stocksListEl) {\n  ReactDOM.render(e(StockListComponent, stocksListEl.dataset), stocksListEl)\n}\n\nconst navigationEl = document.getElementById('navbar')\nif (navigationEl) {\n  ReactDOM.render(e(NavigationComponent, navigationEl.dataset), navigationEl)\n}\n\nconst stockDetailElements = document.querySelectorAll(\".stock-detail\")\nstockDetailElements.forEach(container => {\n  ReactDOM.render(\n    e(StockDetailComponent, container.dataset),\n    container);\n})\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}